 -- Criando campo [LFS_ID_OLD] pra receber IDs do campo [LFS_ID] PARA GUARDAR OS IDs ANTIGOS 
 IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS 
 WHERE COLUMNS.TABLE_NAME = 'LFS_00_05'
 AND COLUMNS.COLUMN_NAME = 'LFS_ID_OLD')
 BEGIN 
 ALTER TABLE dbo.LFS_00_05
 ADD LFS_ID_OLD int NULL 
 END 
 GO 
  
 -- Guarda [LFS_ID] de relação com o cabeçalho no novo [LFS_ID_OLD] bkp 
 UPDATE LFS_00_05
 SET    LFS_ID_OLD = LFS_ID
 WHERE  LFS_ID_OLD IS NULL 
 GO 
  
 -- Recria índice Primary Key da table  [LFS_ID] para o campo [LFS_ID] 
 IF EXISTS ( SELECT count(table_name) 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
    WHERE table_name = 'LFS_00_05'
    HAVING COUNT(*) > 1 ) 
 BEGIN
 -- DESABILITA INDICE 
 ALTER INDEX ALL ON [LFS_00_05]
 DISABLE 
  
 -- VERIFICA SE EXISTE O INDICE E O APAGA 
 IF  EXISTS (SELECT * 
             FROM sys.indexes AS si 
             WHERE si.name = 'LFS_00_05_PK')
             ALTER TABLE dbo.LFS_00_05
             DROP CONSTRAINT LFS_00_05_pk 
  
 -- ALTERA A TABLE CRIANDO O INDICE 
 ALTER TABLE dbo.LFS_00_05
 ADD CONSTRAINT LFS_00_05_pk 
 PRIMARY KEY CLUSTERED (LFS_ID) 
 WITH ( 
   PAD_INDEX = OFF, 
   FILLFACTOR = 90, 
   IGNORE_DUP_KEY = OFF, 
   STATISTICS_NORECOMPUTE = OFF, 
   ALLOW_ROW_LOCKS = ON, 
   ALLOW_PAGE_LOCKS = ON) 
 ON [PRIMARY] 
  
 -- REABILITA INDICES 
 ALTER INDEX ALL ON [LFS_00_05] 
 REBUILD 
 END
 GO
  
-- Atualiza novos ids da mãe [LFS_00] campo [LFS_ID], na table filha [LFS_00_05] campo [LFS_ID]
 UPDATE LFS_00_05 -- FILHA
 SET LFS_00_05.LFS_ID = T2.LFS_ID -- FILHA  RECEBE DA MÃE
 FROM LFS_00_05 -- FILHA
 INNER JOIN LFS_00 T2 ON (LFS_00_05.LFS_ID_OLD = T2.LFS_ID_OLD)
 AND (LFS_00_05.COM_CODIGO    = T2.COM_CODIGO)  --RELACIONA FILHA COM MAE
 GO 
  
