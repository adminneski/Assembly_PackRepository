-- "1070" Criando campo [NFE_ID_OLD] pra receber IDs do campo [NFE_ID] PARA GUARDAR OS IDs ANTIGOS 
 IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS 
 WHERE COLUMNS.TABLE_NAME = 'NFE_00_03'
 AND COLUMNS.COLUMN_NAME = 'NFE_ID_OLD')
 BEGIN 
 ALTER TABLE dbo.NFE_00_03
 ADD NFE_ID_OLD int NULL 
 END; 
 GO 
  
 -- "MOTHER" Guarda [NFE_ID] de relação com o cabeçalho no novo [NFE_ID_OLD] bkp 
 UPDATE NFE_00_03
 SET    NFE_ID_OLD = NFE_ID
 WHERE  NFE_ID_OLD IS NULL 
 GO

-- Atualiza novos ids da mãe [NFE_00] campo [NFE_ID], na table filha [NFE_00_03] campo []
 UPDATE NFE_00_03 -- FILHA
 SET NFE_00_03.NFE_ID = T2.NFE_ID -- FILHA  RECEBE DA MÃE
 FROM NFE_00_03 -- FILHA
 INNER JOIN NFE_00 T2 ON (NFE_00_03.NFE_ID_OLD = T2.NFE_ID_OLD)
 AND (NFE_00_03.COM_CODIGO    = T2.COM_CODIGO)  --RELACIONA FILHA COM MAE
 GO
  
 -- Recria índice Primary Key da table  [] para o campo [] 
 IF EXISTS ( SELECT count(table_name) 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
    WHERE table_name = 'NFE_00_03'
    HAVING COUNT(*) > 1 ) 
 BEGIN
 -- DESABILITA INDICE 
 ALTER INDEX ALL ON [NFE_00_03]
 DISABLE 
  
 -- VERIFICA SE EXISTE O INDICE E O APAGA 
 IF  EXISTS (SELECT * 
             FROM sys.indexes AS si 
             WHERE si.name = 'NFE_00_03_IDX')
             ALTER TABLE dbo.NFE_00_03
             DROP CONSTRAINT NFE_00_03_idx 
  
 -- ALTERA A TABLE CRIANDO O INDICE 
 ALTER TABLE dbo.NFE_00_03
 ADD CONSTRAINT NFE_00_03_pk 
 PRIMARY KEY CLUSTERED (NFE_ID) 
 WITH ( 
   PAD_INDEX = OFF, 
   FILLFACTOR = 90, 
   IGNORE_DUP_KEY = OFF, 
   STATISTICS_NORECOMPUTE = OFF, 
   ALLOW_ROW_LOCKS = ON, 
   ALLOW_PAGE_LOCKS = ON) 
 ON [PRIMARY] 
  
 -- REABILITA INDICES 
 ALTER INDEX ALL ON [NFE_00_03] 
 REBUILD 
 END
 GO