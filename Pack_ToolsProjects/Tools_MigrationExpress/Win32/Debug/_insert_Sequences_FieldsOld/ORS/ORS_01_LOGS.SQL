 -- "1058" Criando campo [ORS_ID_OLD] pra receber IDs do campo [ORS_ID] PARA GUARDAR OS IDs ANTIGOS 
 IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS 
 WHERE COLUMNS.TABLE_NAME = 'ORS_01_LOGS'
 AND COLUMNS.COLUMN_NAME = 'ORS_ID_OLD')
 BEGIN 
 ALTER TABLE dbo.ORS_01_LOGS
 ADD ORS_ID_OLD int NULL 
 END; 
 GO

 -- "1267" Guarda [ORS_ID] de relação com o cabeçalho no novo [ORS_ID_OLD] bkp 
 UPDATE ORS_01_LOGS
 SET    ORS_ID_OLD = ORS_ID
 WHERE  ORS_ID_OLD IS NULL 
 GO 

 -- Recria índice Primary Key da table [ORS_01_LOGS] para o campo [ORS_ID_LOG] 
 IF EXISTS ( SELECT count(table_name) 
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
    WHERE table_name = 'ORS_01_LOGS'
    HAVING COUNT(*) > 1 ) 
 BEGIN
 -- DESABILITA INDICE 
 ALTER INDEX ALL ON [ORS_01_LOGS]
 DISABLE 
  
 -- VERIFICA SE EXISTE O INDICE E O APAGA 
 IF  EXISTS (SELECT * 
             FROM sys.indexes AS si 
             WHERE si.name = 'ORS_01_LOG_PK')
             ALTER TABLE dbo.ORS_01_LOGS
             DROP CONSTRAINT ORS_01_LOG_pk 
  
 -- ALTERA A TABLE CRIANDO O INDICE 
 ALTER TABLE dbo.ORS_01_LOGS
 ADD CONSTRAINT ORS_01_LOG_pk 
 PRIMARY KEY CLUSTERED (ORS_ID_LOG) 
 WITH ( 
   PAD_INDEX = OFF, 
   FILLFACTOR = 90, 
   IGNORE_DUP_KEY = OFF, 
   STATISTICS_NORECOMPUTE = OFF, 
   ALLOW_ROW_LOCKS = ON, 
   ALLOW_PAGE_LOCKS = ON) 
 ON [PRIMARY] 
  
 -- REABILITA INDICES 
 ALTER INDEX ALL ON [ORS_01_LOGS] 
 REBUILD 
 END
 GO
 
 -- Atualiza novos ids da mãe [MDV_00] campo [MDV_ID], na table filha [ORS_00] campo [MDV_ID]
 UPDATE ORS_01_LOGS -- FILHA
 SET ORS_01_LOGS.ORS_ID = T2.ORS_ID -- FILHA  RECEBE DA MÃE
 FROM ORS_01_LOGS -- FILHA
 INNER JOIN ORS_00 T2 ON (ORS_01_LOGS.ORS_ID_OLD = T2.ORS_ID_OLD)
 AND (ORS_01_LOGS.COM_CODIGO    = T2.COM_CODIGO)  --RELACIONA FILHA COM MAE
 GO